services:
  web:
    build: .  # Сборка из Dockerfile в корне проекта
    command: sh -c "/app/wait-for-db.sh && python manage.py migrate && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/staticfiles  # Том для статических файлов
    env_file:
      - .env  # Файл с переменными окружения
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy  # Ожидание готовности БД
      redis:
        condition: service_started
    networks:
      - backend_network

  nginx:
    build: ./nginx  # Dockerfile для Nginx в папке ./nginx
    ports:
      - "80:80"  # Проброс порта 80
    volumes:
      - static_volume:/app/staticfiles  # Общий том со статикой
    depends_on:
      - web  # Зависимость от сервиса web
    networks:
      - backend_network

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Сохранение данных БД
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  redis:
    image: redis
    expose:
      - "6379"  # Открываем порт для других сервисов
    volumes:
      - redis_data:/data  # Сохранение данных Redis
    networks:
      - backend_network

  celery_beat:
    build: .
    command: celery -A config beat --loglevel=info
    user: "1000:1000"  # Совпадает с UID/GID из Dockerfile
    env_file: .env
    volumes:
      - ./celery_beat:/app/celery_beat  # Том для расписания
    depends_on:
      - redis
      - db

  celery_worker:
    build: .
    command: celery -A config worker --loglevel=INFO
    user: "1000:1000"
    env_file: .env
    depends_on:
      - redis
      - db

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  redis_data:
